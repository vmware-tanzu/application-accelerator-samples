#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:regexp", "regexp")
    
#@ def buildIdentityProviders():
#@ if data.values.enableDefaultDevAccount == True:
    - name: dev-users
      internalUnsafe:
        users:
          - username: #@ data.values.devDefaultAccountUsername
            password: #@ data.values.devDefaultAccountPassword
            roles:
              - "patron"
#@ end            
#@ end

---
apiVersion: sso.apps.tanzu.vmware.com/v1alpha1
kind: AuthServer
metadata:
  name: #@ data.values.appSSOName
  namespace: #@ data.values.workloadNamespace
  labels:
    name: #@ data.values.appSSOName
    app: where-for-dinner    
  annotations:
    sso.apps.tanzu.vmware.com/allow-client-namespaces: "*"
    sso.apps.tanzu.vmware.com/allow-unsafe-identity-provider: ""
    sso.apps.tanzu.vmware.com/allow-unsafe-issuer-uri: ""
spec:
  tls: 
    deactivated: true
  tokenSignature:
    signAndVerifyKeyRef:
      name: #@ data.values.appSSOName +"-signing-key"
  identityProviders: #@ buildIdentityProviders()
---
apiVersion: secretgen.k14s.io/v1alpha1
kind: RSAKey
metadata:
  name: #@ data.values.appSSOName + "-signing-key"
  namespace: #@ data.values.workloadNamespace
spec:
  secretTemplate:
    type: Opaque
    stringData:
      key.pem: $(privateKey)      
      pub.pem: $(publicKey)
      
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: where-for-dinner-client-registration-app-operator-reader
  labels:
    servicebinding.io/controller: "true"
rules:
- apiGroups: ["sso.apps.tanzu.vmware.com"]
  resources: ["ClientRegistration"]
  verbs: ["get", "list", "watch"]

---
apiVersion: services.apps.tanzu.vmware.com/v1alpha1
kind: ClusterInstanceClass
metadata:
  name: clientreg-where-for-dinner
spec:
  description:
    short: Where For Dinner AppSSO Client Registrations
  pool:
    group: sso.apps.tanzu.vmware.com
    kind: ClientRegistration
    labelSelector:
      matchLabels:
        services.apps.tanzu.vmware.com/class: clientreg-where-for-dinner    