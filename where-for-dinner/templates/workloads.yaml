#@ load("@ytt:data", "data")


#@ def buildServiceClaimsBinding(usesDB,usesRMQ,usesSec,usesCache):
#@ if usesSec == True and data.values.enableSecurity == True:
  - name: sso
    ref:
      apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ClassClaim
      name: #@ data.values.appSSOName
#@ end
#@ if usesRMQ == True:
  - name: rmq
    ref:
      apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ClassClaim
      name: #@ data.values.msgbrokerName
#@ end
#@ if usesDB == True and data.values.dbType != "h2":
  - name: db
    ref:
      apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ClassClaim
      name: #@ data.values.dbName   
#@ end 
#@ if usesCache == True and data.values.cacheType == "redisCache":
  - name: cache
    ref:
      apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ClassClaim
      name: #@ data.values.cacheName 
#@ end     
#@ end


#@ def buildAppEnv(addSecProf,addDBProf,addCacheProf,addCrawlerProf,addMsgBrokerProf):
#@ profiles = ""
#@ if addSecProf == True and data.values.enableSecurity == True:
#@ profiles = "secure"
#@ end
#@ if addDBProf == True and data.values.dbType == "mysql":
#@ if profiles != "":
#@    profiles = profiles + ","
#@ end
#@ profiles = profiles + "mysql"
#@ end
#@ if addCacheProf == True and data.values.cacheType == "redisCache":
#@ if profiles != "":
#@    profiles = profiles + ","
#@ end
#@ profiles = profiles + "redis"
#@ end
#@ if addCrawlerProf:
#@ if profiles != "":
#@    profiles = profiles + ","
#@ end
#@ profiles = profiles + "crawler"
#@ end
#@ if addMsgBrokerProf:
#@ if profiles != "":
#@    profiles = profiles + ","
#@ end
#@ profiles = profiles + data.values.msgBrokerType
#@ end
#@ if profiles != "":
  - name: spring_profiles_active
    value: #@ profiles
#@ end
#@ end


#@ def buildGuiAppEnv():
#@ profile = "nonsecure"
#@ if data.values.enableSecurity == True:
#@ profile = "secure"
#@ end
  - name: REACT_APP_PROFILE
    value: #@ profile
#@ end


#@ def buildBuildParams():
  - name: BP_JVM_VERSION
    value: "17" 
#@ if data.values.enableCloudEvents == True:
  - name: BP_MAVEN_BUILD_ARGUMENTS
    value: '-P native -Dmaven.test.skip=true --no-transfer-progress package'
#@ end
#@ end

#@ def buildParams():
#@ if data.values.enableCloudEvents != True:
  - name: annotations
    value: 
      autoscaling.knative.dev/minScale: "1"
      autoscaling.knative.dev/target: "200"
      autoscaling.knative.dev/maxScale: "4"
#@ else:
  - name: annotations
    value: 
      autoscaling.knative.dev/target: "200"
      autoscaling.knative.dev/maxScale: "4"
#@ end
#@ end

#@ if data.values.gatewayType == 'ossscg':
---
apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: where-for-dinner
  namespace: #@ data.values.workloadNamespace
  labels:
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/part-of: where-for-dinner-api-gateway
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true" 
spec:
  env: #@ buildAppEnv(True,False,False,False,False)
  params:
  - name: annotations
    value: 
      autoscaling.knative.dev/minScale: "1"  
      autoscaling.knative.dev/target: "200"
      autoscaling.knative.dev/maxScale: "4"
  serviceClaims: #@ buildServiceClaimsBinding(False, False, True, False)
  resources:     
    requests:         
      memory: "500M"
      cpu: "100m"
    limits:         
      memory: "750M"
      cpu: "1500m"         
  build:
    env:
      - name: BP_JVM_VERSION
        value: "17"   
  source:
    git:
      url: <https URL for your generated project's Git repository>
      ref:
        branch: main
    subPath: where-for-dinner-api-gateway
#@ end       
---
apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: where-for-dinner-search
  namespace: #@ data.values.workloadNamespace
  labels:
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/part-of: where-for-dinner-search
    networking.knative.dev/visibility: cluster-local
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true" 
    apis.apps.tanzu.vmware.com/register-api: "true"    
spec:
  env: #@ buildAppEnv(True,True,False,False,True)
  params:
  - name: annotations
    value: 
      autoscaling.knative.dev/minScale: "1"
      autoscaling.knative.dev/target: "200"
      autoscaling.knative.dev/maxScale: "4"
  - name: api_descriptor
    value:
      type: openapi 
      location:
        path: "/v3/api-docs"
      system: where-for-dinner
      owner: where-for-dinner-team  
      description: "Core Where for Dinner service for submitting searches and parameters"    
  serviceClaims: #@ buildServiceClaimsBinding(True, True, True, False)
  resources:     
    requests:         
      memory: "500M"
      cpu: "100m"
    limits:         
      memory: "750M"
      cpu: "1500m"         
  build:
    env:
      - name: BP_JVM_VERSION
        value: "17"    
  source:
    git:
      url: <https URL for your generated project's Git repository>
      ref:
        branch: main
    subPath: where-for-dinner-search
---

apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: where-for-dinner-search-proc
  namespace: #@ data.values.workloadNamespace
  labels:
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/part-of: where-for-dinner-search-proc
    networking.knative.dev/visibility: cluster-local
    apps.tanzu.vmware.com/auto-configure-actuators: "true"  
    apps.tanzu.vmware.com/has-tests: "true"  
spec:
  env: #@ buildAppEnv(False,False,True,True,True)
  build:
     env: #@ buildBuildParams()
  params: #@ buildParams()
  serviceClaims: #@ buildServiceClaimsBinding(False, True, False, True)
  resources:     
    requests:         
      memory: "500M"
      cpu: "100m"
    limits:         
      memory: "750M"
      cpu: "1500m"         
  source:
    git:
      url: <https URL for your generated project's Git repository>
      ref:
        branch: main
    subPath: where-for-dinner-search-proc
    
---

apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: where-for-dinner-notify
  namespace: #@ data.values.workloadNamespace
  labels:
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/part-of: where-for-dinner-notify
    networking.knative.dev/visibility: cluster-local
    apps.tanzu.vmware.com/auto-configure-actuators: "true"   
    apps.tanzu.vmware.com/has-tests: "true" 
spec:
  env: #@ buildAppEnv(False,False,False,False,True)
  build:
     env: #@ buildBuildParams()
  params: #@ buildParams()
  serviceClaims: #@ buildServiceClaimsBinding(False, True, False, False)
  resources:     
    requests:         
      memory: "500M"
      cpu: "100m"
    limits:         
      memory: "750M"
      cpu: "1500m"            
  source:
    git:
      url: <https URL for your generated project's Git repository>
      ref:
        branch: main
    subPath: where-for-dinner-notify
---

apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: where-for-dinner-availability
  namespace: #@ data.values.workloadNamespace
  labels:
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/part-of: where-for-dinner-availability
    networking.knative.dev/visibility: cluster-local
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apis.apps.tanzu.vmware.com/register-api: "true"     
spec:
  build:
     env: #@ buildBuildParams()
  env: #@ buildAppEnv(True,True,False,False,True)
  params:
  - name: annotations
    value: 
      autoscaling.knative.dev/minScale: "1"
      autoscaling.knative.dev/target: "200"
      autoscaling.knative.dev/maxScale: "4"
  - name: api_descriptor
    value:
      type: openapi 
      location:
        path: "/v3/api-docs"
      system: where-for-dinner
      owner: where-for-dinner-team  
      description: "Core Where For Dinner service for retrieving dining availability"        
  serviceClaims: #@ buildServiceClaimsBinding(True, True, True, False)
  resources:     
    requests:         
      memory: "500M"
      cpu: "100m"
    limits:         
      memory: "750M"
      cpu: "1.5"          
  source:
    git:
      url: <https URL for your generated project's Git repository>
      ref:
        branch: main
    subPath: where-for-dinner-availability

---
apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: where-for-dinner-ui
  namespace: #@ data.values.workloadNamespace
  labels:
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/part-of: where-for-dinner-ui
    networking.knative.dev/visibility: cluster-local
    apps.tanzu.vmware.com/has-tests: "true"
spec:
  build:
    env:
    - name: BP_NODE_RUN_SCRIPTS
      value: build
    - name: BP_WEB_SERVER_ROOT
      value: dist
  env: #@ buildGuiAppEnv()
  params:
  - name: annotations
    value: 
      autoscaling.knative.dev/minScale: "1"
  resources:     
    requests:         
      memory: "500M"
      cpu: "100m"
    limits:         
      memory: "750M"
      cpu: "1500m"           
  source:
    git:
      url: <https URL for your generated project's Git repository>
      ref:
        branch: main
    subPath: where-for-dinner-ui
---
#@ if data.values.ployglotWorkloads != True:
apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: where-for-dinner-crawler
  namespace: #@ data.values.workloadNamespace
  labels:
    apps.tanzu.vmware.com/workload-type: server
    app.kubernetes.io/part-of: where-for-dinner-crawler
    apps.tanzu.vmware.com/auto-configure-actuators: "true"  
    apps.tanzu.vmware.com/has-tests: "true"  
spec:
  params:
  - name: ports
    value:
    - port: 80
      containerPort: 8080
      name: http
  resources:     
    requests:         
      memory: "500M"
      cpu: "100m"
    limits:         
      memory: "750M"
      cpu: "1500m"         
  build:
    env:
      - name: BP_JVM_VERSION
        value: "17"        
  source:
    git:
      url: <https URL for your generated project's Git repository>
      ref:
        branch: main
    subPath: where-for-dinner-crawler
#@ else:
apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: where-for-dinner-crawler
  namespace: #@ data.values.workloadNamespace  
  labels:
    apps.tanzu.vmware.com/workload-type: server
    app.kubernetes.io/part-of: where-for-dinner-crawler
    apps.tanzu.vmware.com/has-tests: "true"        
spec:
  params:
  - name: ports
    value:
    - port: 80
      containerPort: 8080
      name: http      
  resources:     
    requests:         
      memory: "500M"
      cpu: "100m"
    limits:         
      memory: "750M"
      cpu: "1500m"                
  source:
    git:
      url: <https URL for your generated project's Git repository>
      ref:
        branch: main
    subPath: where-for-dinner-crawler-python
#@ end