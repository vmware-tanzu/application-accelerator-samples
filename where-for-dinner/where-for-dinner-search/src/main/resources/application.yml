server:
  port: 8081
  # When running behind a reverse proxy, this stradedgy needs to be set to ensure
  # that OpenAPI endpoint returns the correct server URLs
  # https://springdoc.org/faq.html#_how_can_i_deploy_springdoc_openapi_ui_behind_a_reverse_proxy
  forward-headers-strategy: framework

where-for-dinner:
  searchEvent:
    period: 120000

# default profile uses H2 as the database and RabbitMQ and the stream binder
    
spring: 
  application:
    name: where-for-dinner-search

  sql.init.mode: ALWAYS 
  sql.init.platform: h2

  cloud: 
    function:
      definition: submittedSearches    
    stream:
      defaultBinder: rabbit
      poller:
        fixed-delay: ${where-for-dinner.searchEvent.period} 
      bindings: 
        submittedSearches-out-0: 
          destination: where-for-dinner-search-criteria
        deletedSearches-out-0: 
          destination: where-for-dinner-search-deletion

springdoc:
  packages-to-scan: com.java.example.tanzu.wherefordinner.resources
  show-spring-cloud-functions: false
          
---

spring:
  config.activate.on-profile: mysql
  
  sql.init.platform: mysql
  
  r2dbc: 
    #Default properties to work with MariaDB driver
    properties.sslMode: TRUST  
    properties.tlsVersion: TLSv1.2
    
---

spring:
  config.activate.on-profile: postgres
  
  sql.init.platform: postgresql

---

spring:
  config.activate.on-profile: kafka
  
  cloud: 
    stream:
      defaultBinder: kafka

  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration

management:
  health:
    rabbit:
      enabled: false

---

spring:
  config.activate.on-profile: kinesis
  
  cloud: 
    stream:
      defaultBinder: kinesis     
      
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration

management:
  health:
    rabbit:
      enabled: false 
          