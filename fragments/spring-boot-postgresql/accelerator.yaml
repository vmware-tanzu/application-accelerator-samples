accelerator:
  options:
    - name: databaseName
      inputType: text
      defaultValue: "customer-database"
      label: Database Instance Name
      description: The name of the database instance this application will use (can be existing one in the cluster)
      required: true
    - name: databaseIntegrationTestType
      inputType: select
      label: Use testcontainers or in-memory database for integration testing
      description: "In order to test database interaction you can choose between testcontainers (https://www.testcontainers.org/) or in-memory database (H2). Preferable use testcontainers as that is providing the target database technology."
      choices:
        - value: "testcontainers"
          text: "Testcontainers"
        - value: "in-memory"
          text: "Java In-Memory Database (H2)"
      defaultValue: "testcontainers"
      required: true
    - name: databasePostgresStorageClass
      inputType: text
      defaultValue: "standard"
      description: The storage class to be used for storing PostgreSQL data
    - name: databasePostgresMonitoringClass
      inputType: text
      defaultValue: "standard"
      description: The storage class to be used for monitoring PostgreSQL

  imports:
    - name: spring-boot-h2

engine:
  let:
    - name: databaseResourceName
      expression: '#databaseName.toLowerCase()'
    - name: databasePostgresStorageClassResourceName
      expression: '#databasePostgresStorageClass.toLowerCase()'
    - name: databasePostgresMonitoringClassResourceName
      expression: '#databasePostgresMonitoringClass.toLowerCase()'
  chain:
    - merge:
      - include: [ "**" ]
        exclude: [ "docker-compose-postgresql.yaml", "**/src/main/resources/application-local.properties", "**/src/test/resources/application-test.properties", "**/workload.yaml", "config/postgres.yaml", "config/postgres-resource-claim.yaml", "config/postgres-resource-claim-policy.yaml", "pom.xml", "build.gradle.kts", "README.md" ]

      - include: [ "docker-compose-postgresql.yaml" ]
        condition: "#databaseIntegrationTestType == 'testcontainers'"

      - include: [ "**/src/main/resources/application-local.properties" ]
        condition: "#databaseIntegrationTestType == 'testcontainers'"
        chain:
          - merge:
              - type: ReplaceText # No-op to trick the engine into thinking there IS a merge
            onConflict: FavorForeign
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.url'"
              value: "'jdbc:postgresql://localhost:5432/development'"
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.username'"
              value: "'user'"
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.password'"
              value: "'password'"

      - include: [ "**/src/main/resources/application-local.properties" ]
        condition: "#databaseIntegrationTestType == 'in-memory'"
        chain:
          - merge:
              - type: ReplaceText # No-op to trick the engine into thinking there IS a merge
            onConflict: FavorForeign
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.url'"
              value: "'jdbc:h2:mem:testdb'"
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.driverClassName'"
              value: "'org.h2.Driver'"

      - include: [ "**/src/test/resources/application-test.properties" ]
        condition: "#databaseIntegrationTestType == 'testcontainers'"
        chain:
          - merge:
              - type: ReplaceText # No-op to trick the engine into thinking there IS a merge
            onConflict: FavorForeign
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.url'"
              value: "'jdbc:tc:postgresql:14:////postgres'"
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.driverClassName'"
              value: "'org.testcontainers.jdbc.ContainerDatabaseDriver'"
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.test.database.replace'"
              value: "'NONE'"

      - include: [ "**/src/test/resources/application-test.properties" ]
        condition: "#databaseIntegrationTestType == 'in-memory'"
        chain:
          - merge:
              - type: ReplaceText # No-op to trick the engine into thinking there IS a merge
            onConflict: FavorForeign
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.url'"
              value: "'jdbc:h2:mem:testdb'"
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.datasource.driverClassName'"
              value: "'org.h2.Driver'"
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.properties.AddProperty
            options:
              property: "'spring.test.database.replace'"
              value: "'NONE'"

      - include: [ "**/workload.yaml" ]
        chain:
          - type: ReplaceText
            substitutions:
              - text: "postgres-database"
                with: "#databaseResourceName"
          - type: OpenRewriteRecipe
            recipe: org.openrewrite.yaml.MergeYaml
            options:
              key: "'$.spec'"
              yaml: "'serviceClaims:\n  - name: postgres-db\n    ref:\n      apiVersion: services.apps.tanzu.vmware.com/v1alpha1\n      kind: ResourceClaim\n      name: ' + #databaseResourceName + '-claim'"

      - include: [ "config/postgres.yaml", "config/postgres-resource-claim.yaml", "config/postgres-resource-claim-policy.yaml" ]
        chain:
          - type: ReplaceText
            substitutions:
              - text: "monitoring-storage-class-standard"
                with: '#databasePostgresMonitoringClassResourceName'
              - text: "storage-class-standard"
                with: '#databasePostgresStorageClassResourceName'
              - text: "postgres-database"
                with: "#databaseResourceName"
              - text: "postgresdatabase"
                with: "#databaseName"

      - include: [ "pom.xml" ]
        chain:
          - type: ReplaceText
            regex:
              pattern: "(?<startOfDependencies><dependencies>)(?<existingDependencies>(?![\\s\\S]+<groupId>org.postgresql</groupId>\\s*<artifactId>postgresql</artifactId>[\\s\\S]+</dependencies>))"
              with: |
                '${startOfDependencies}
                        <dependency>
                            <groupId>org.postgresql</groupId>
                            <artifactId>postgresql</artifactId>
                            <scope>runtime</scope>
                        </dependency>${existingDependencies}'
          - type: ReplaceText
            condition: "#databaseIntegrationTestType == 'testcontainers'"
            regex:
              pattern: "(?<startOfDependencies><dependencies>)(?<existingDependencies>(?![\\s\\S]+<groupId>org.testcontainers</groupId>\\s*<artifactId>postgresql</artifactId>[\\s\\S]+</dependencies>))"
              with: |
                '${startOfDependencies}
                        <dependency>
                            <groupId>org.testcontainers</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>1.17.3</version>
                            <scope>test</scope>
                        </dependency>${existingDependencies}'

      - include: [ "build.gradle.kts" ]
        chain:
          - type: ReplaceText
            regex:
              pattern: "(?<startOfDependencies>dependencies \\{)(?<existingDependencies>(?![\\s\\S]+implementation\\s*\\(\"org.postgresql:postgresql[\\s\\S]+))"
              with: |
                '${startOfDependencies}
                    runtimeOnly("org.postgresql:postgresql")${existingDependencies}'
          - type: ReplaceText
            condition: "#databaseIntegrationTestType == 'testcontainers'"
            regex:
              pattern: "(?<startOfDependencies>dependencies \\{)(?<existingDependencies>(?![\\s\\S]+testImplementation\\s*\\(\"org.testcontainers:postgresql[\\s\\S]+))"
              with: |
                '${startOfDependencies}
                    testImplementation("org.testcontainers:postgresql:1.17.3")${existingDependencies}'

      - include: [ "README.md" ]
        chain:
          - merge:
              - type: ReplaceText # No-op to trick the engine into thinking there IS a merge
            onConflict: FavorForeign
          - type: ReplaceText
            regex:
              pattern: "(?<existingContent>[\\s\\S]*)(?<endOfFile>\n)"
              with: |
                '${existingContent}
  
                > **_NOTE:_** Below you can find additional information concerning PostgreSQL integration. 
                
                ## PostgreSQL
                ### Deployment
                #### Tanzu Application Platform (TAP)
                Using the `config/workload.yaml` it is possible to build, test and deploy this application onto a
                Kubernetes cluster that is provisioned with Tanzu Application Platform (https://tanzu.vmware.com/application-platform).
  
                As with the local deployment a PostgreSQL instance needs to be available at the cluster.
                When using VMware Tanzu SQL with Postgres for Kubernetes (https://tanzu.vmware.com/sql and https://docs.vmware.com/en/VMware-Tanzu-SQL-with-Postgres-for-Kubernetes/index.html),
                one could apply for an instance, and it will be automatically provisioned.
  
                > Note: please define the storage class to be used for the PostgreSQL storage.
                
                ```bash
                \$ kubectl apply -n \<your-services-namespace> -f config/postgres.yaml
                ```
                
                When the PostgreSQL instance is created, resource binding needs to be configured in order that your workload can access
                the PostgreSQL instance, which maybe be in another namespace than your application workload.
                
                1. Configure the `ResourceClaimPolicy` to define which namespaces could have access to your PostgreSQL instance namespaces.
                   (optional: only needed when PostgreSQL instance is in different namespace than workload namespace).
                
                   Edit `consumingNamespaces` in `config/postgres-resource-claim-policy.yaml` to contain your workload namespace and apply:
                   
                   ```bash
                   \$ kubectl apply -n \<your-services-namespace> -f config/postgres-resource-claim-policy.yaml
                   ```
                
                2. Create the `ResourceClaim` to be consumed by your workload that references your PostgreSQL instance:
                   > Note: change the `spec.ref.namespace` of `config/postgres-resource-claim.yaml` to where the PostgreSQL instance is deployed.
                   
                   ```bash
                   \$ kubectl apply -n \<your-workload-namespace> -f config/postgres-resource-claim.yaml
                   ```
                
                Now that the resource binding is configured the `Workload` can be applied.
                '
          - type: ReplaceText
            condition: "#databaseIntegrationTestType == 'in-memory'"
            regex:
              pattern: "(?<existingContent>[\\s\\S]*)(?<endOfFile>\n)"
              with: |
                '${existingContent}
                
                ### Local
                For local development an in-memory database is provided and configured with the local profile. 
                
                > If you start the application locally please be sure that `local` profile is active.
                '
          - type: ReplaceText
            condition: "#databaseIntegrationTestType == 'testcontainers'"
            regex:
              pattern: "(?<existingContent>[\\s\\S]*)(?<endOfFile>\n)"
              with: |
                '${existingContent}
                
                ### Local
                Running a PostgreSQL instance can easily be done by using `docker-compose`:
                
                ```bash
                \$ docker-compose -f ./docker-compose-postgresql.yml up -d
                ```
                
                > If you start the application locally please be sure that `local` profile is active.
                '

    - condition: "#databaseIntegrationTestType == 'in-memory'"
      merge:
        - type: InvokeFragment
          reference: spring-boot-h2
        - include: [ "**" ]
      onConflict: UseFirst
