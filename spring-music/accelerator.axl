engine {

  applyTo("build.gradle" || "README.md" || "manifest.yml" || "**/*.yaml" || "**/*.yml" || "**/*.java") {
    TextPreprocessor()
  }

  if (#persistenceType == 'jpa') {
    select(
      !"src/main/java/com/example/music/config/data/**" &&
      !"src/main/java/com/example/music/domain/RandomIdGenerator.java" &&
      !"src/main/java/com/example/music/repositories/mongodb/**" &&
      !"src/main/java/com/example/music/repositories/redis/**")
  }
  if (#persistenceType == 'mongodb') {
    select(
      !"src/main/java/com/example/music/config/data/**" &&
      !"src/main/java/com/example/music/domain/RandomIdGenerator.java" &&
      !"src/main/java/com/example/music/repositories/jpa/**" &&
      !"src/main/java/com/example/music/repositories/redis/**")
  }
  if (#persistenceType == 'redis') {
     select(
       !"src/main/java/com/example/music/repositories/mongodb/**" &&
       !"src/main/java/com/example/music/repositories/jpa/**")
  }

  // Update the artifact name as needed
  applyTo("README.md" || "settings.gradle" || "manifest.yml") {
    ReplaceSnippet(text: "spring-music", with: #artifactId.toLowerCase())
  }

  // Set the profile as needed
  applyTo("manifest.yml") {
    if (#persistenceType == 'jpa') {
      if (#databaseType == 'postgres') {
        ReplaceRegex(pattern: "SPRING_PROFILES_ACTIVE: .*", with: 'SPRING_PROFILES_ACTIVE: "cloud,postgres"')
      }
      if (#databaseType == 'mysql') {
        ReplaceRegex(pattern: "SPRING_PROFILES_ACTIVE: .*", with: 'SPRING_PROFILES_ACTIVE: "cloud,mysql"')
      }
    }
  }

  applyTo("README.md") {
    ReplaceSnippet(text: "JAVA_VERSION", with: #javaVersion)
  }

  {
    select("**")
    // Update the java version
    + InvokeFragment("java-version")
  }
  UniquePath(strategy: UseLast)

  {
    select("**")
    // Add the build wrapper
    + InvokeFragment("build-wrapper-gradle")
  }
  UniquePath(strategy: UseLast)

  // Create the provenance file
  Provenance()

}