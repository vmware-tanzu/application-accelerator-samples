engine {

  applyTo("build.gradle" || "README.md" || "**/*.yaml" || "**/*.yml" || "**/*.java") {
    TextPreprocessor()
  }

  if (#deploymentType == 'none') {
    select(!"deploy/**")
  } else {
    if (#deploymentType == 'tpfork8s') {
      applyTo("deploy/tpfork8s/tanzu.yml") {
        ReplaceSnippet(text: "spring-music", with: #artifactId.toLowerCase())
        RewritePath(rewriteTo: #filename)
      }
      applyTo("deploy/tpfork8s/.tanzu/config/spring-music.yml") {
        ReplaceText({{text: "spring-music", with: #artifactId.toLowerCase()}})
        RewritePath(rewriteTo: '.tanzu/config/' + #artifactId.toLowerCase() + '.yml')
      }
      select(!"deploy/**")
    }
  }

  if (#persistenceType == 'jpa') {
    select(
      !"src/main/java/com/example/music/config/data/**" &&
      !"src/main/java/com/example/music/repositories/mongodb/**" &&
      !"src/main/java/com/example/music/repositories/redis/**")
  }
  if (#persistenceType == 'mongodb') {
    select(
      !"src/main/java/com/example/music/config/data/**" &&
      !"src/main/java/com/example/music/domain/RandomIdGenerator.java" &&
      !"src/main/java/com/example/music/repositories/jpa/**" &&
      !"src/main/java/com/example/music/repositories/redis/**")
  }
  if (#persistenceType == 'redis') {
     select(
       !"src/main/java/com/example/music/repositories/mongodb/**" &&
       !"src/main/java/com/example/music/repositories/jpa/**")
  }

  // Update the artifact name as needed
  applyTo("README.md" || "settings.gradle") {
    ReplaceSnippet(text: "spring-music", with: #artifactId.toLowerCase())
  }

  applyTo("README.md") {
    ReplaceSnippet(text: "JAVA_VERSION", with: #javaVersion)
  }

  // Update the configuration id
  let uuid = T(java.util.UUID).randomUUID() in {
    applyTo("tanzu.yml") {
      OpenRewriteRecipe('org.openrewrite.yaml.ChangeValue', { oldKeyPath: "$.configuration.id", value: 'config-' + #uuid.toString()})
    }
  }

  {
    select("**")
    // Update the java version
    + InvokeFragment("java-version")
  }
  UniquePath(strategy: UseLast)

  {
    select("**")
    // Add the build wrapper
    + InvokeFragment("build-wrapper-gradle")
  }
  UniquePath(strategy: UseLast)

  // Create the provenance file
  Provenance()

}