engine {

  applyTo("README.md" || "pom.xml" || "src/main/resources/application.properties") {
    TextPreprocessor()
  }

  if (#vectorStoreType == 'simple') {
    Exclude({"**/schema-pgvector.sql", "**/application-pgvector.properties"})
  }
  else {
    Exclude({"**/SimpleVectorStoreConfig.java"})
  }

  applyTo("pom.xml") {
    ReplaceText({
      {text: "<groupId>com.vmware.tap.accelerators</groupId>", with: '<groupId>' + #groupId + '</groupId>'},
      {text: "<artifactId>ai-chat</artifactId>", with: '<artifactId>' + #artifactId + '</artifactId>'}
    })
    if (#aiService == 'azureOpenAI') {
      ReplaceText({{text: "spring-ai-openai-spring-boot-starter", with: 'spring-ai-azure-openai-spring-boot-starter'}})
    }
  }

  applyTo("src/main/resources/application.properties") {
    if (#aiService == 'openAI') {
      ReplaceText({{text: "spring.ai.openai.model=gpt-3.5-turbo", with: 'spring.ai.openai.model=' + #openaiModel}})
    }
    if (#aiService == 'azureOpenAI') {
      ReplaceText({
        {text: "spring.ai.azure.openai.endpoint=TBD", with: 'spring.ai.azure.openai.endpoint=' + #azureAIEndpoint},
        {text: "spring.ai.openai.api-key", with: 'spring.ai.azure.openai.api-key'},
        {text: "spring.ai.openai.model=gpt-3.5-turbo", with: 'spring.ai.azure.openai.model=' + #openaiModel}
      })
    }
  }

  applyTo(".tanzu/config/egresspoint-spring-ai-chat.yml") {
    if (#aiService == 'azureOpenAI') {
      ReplaceText({
        {text: "api.openai.com", with: 'openai.azure.com'}
      })
    }
  }

  let packageDirectory = #packageName.replace(".", "/") in {
    applyTo("**/*.java") {
      ReplaceText({{text: "com.vmware.tap.accelerators.aichat", with: #packageName}})
      RewritePath(regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)aichat(?<untouchedpath>.*)" , rewriteTo: 'src/' + #sourceset + '/java/' + #packageDirectory + '/' + #untouchedpath)
    }
  }

  // Update the artifact name as needed
  applyTo("README.md") {
    ReplaceText({{text: "spring-ai-chat", with: #artifactId.toLowerCase()}})
  }

  // Update the artifact name and path as needed
  applyTo(".tanzu/config/spring-ai-chat.yml") {
    ReplaceText({{text: "spring-ai-chat", with: #artifactId.toLowerCase()}})
    RewritePath(rewriteTo: '.tanzu/config/' + #artifactId.toLowerCase() + '.yml')
  }
  applyTo(".tanzu/config/httproute-spring-ai-chat.yml") {
    ReplaceText({{text: "spring-ai-chat", with: #artifactId.toLowerCase()}})
    RewritePath(rewriteTo: '.tanzu/config/httproute-' + #artifactId.toLowerCase() + '.yml')
  }
  applyTo(".tanzu/config/egresspoint-spring-ai-chat.yml") {
    ReplaceText({{text: "spring-ai-chat", with: #artifactId.toLowerCase()}})
    RewritePath(rewriteTo: '.tanzu/config/egresspoint-' + #artifactId.toLowerCase() + '.yml')
  }

  // Update the configuration id
  let uuid = T(java.util.UUID).randomUUID() in {
    applyTo("tanzu.yml") {
      OpenRewriteRecipe('org.openrewrite.yaml.ChangeValue', { oldKeyPath: "$.configuration.id", value: 'config-' + #uuid.toString()})
    }
  }

  {
    Include({'**'})
    + InvokeFragment("build-wrapper-maven")
  }
  UniquePath(strategy: UseLast)

  // Create the provenance file
  Provenance()

}