accelerator:
  displayName: Spring Cloud Streams App Template
  description: Template accelerator for creating a Spring Cloud Streams application.  Applications can be play the role of source, processor, sink, or any combination thereof.
  iconUrl: data:image/png;base64, 
  tags:
  - java
  - spring
  - streaming
  options:
    - name: groupId
      inputType: text
      defaultValue: "com.example"
      label: Maven Group Name
      description: "The name of the workload/project that will be created. The spring.application.name will also reflect this option."
      required: true
    - name: packageName
      inputType: text
      defaultValue: "com.example.tanzu.streamtemplate"
      label: Service Root Package Name  
      description: "The base Java package name used for the application."      
      required: true
    - name: mainClassName
      inputType: text
      defaultValue: "StreamApplication"
      label: Application Main Class Name
      description: "The name of class that will be used as the SpringBoot main class."           
      required: true      
    - name: objectModelClassName
      inputType: text
      defaultValue: "Foo"
      label: Model Class Name
      description: "The name of class that will be used for the model object that implements the event/message passed between services."           
      required: true  
    - label: Event Source
      description: "If checked, the generated application will contain code to function as a producer/source."
      defaultValue: true
      name: eventSourceRole
      inputType: checkbox
      dataType: boolean
      required: true    
    - label: Event Processor
      description: "If checked, the generated application will contain code to function as a processor."
      defaultValue: false
      name: eventProcessRole
      inputType: checkbox
      dataType: boolean
      required: true      
    - label: Event Sink
      description: "If checked, the generated application will contain code to function as a consumer/sink."
      defaultValue: false
      name: eventSinkRole
      inputType: checkbox
      dataType: boolean
      required: true                 
    - label: Message Source Channel
      name: sourceChannel
      inputType: text
      defaultValue: "foo-source"
      description: Name of the source channel that flows from the producer to the processor.  Needed if the application functions as a source or processor.
      required: true   
    - label: Message Source Channel Group    
      name: sourceChannelGroup
      inputType: text
      defaultValue: "foo-source-group"
      description: Name of the source channel group.  Needed if the application functions as a processor.
      required: true 
      dependsOn: 
        name: eventProcessRole    
    - label: Message Result Channel         
      name: resultChannel
      inputType: text
      defaultValue: "foo-result"
      description: Name of the result channel that flows from the processor to the sink.   Needed if the application functions as a processor or sink.
      required: true  
    - label: Message Result Channel Group   
      name: resultChannelGroup
      inputType: text
      defaultValue: "foo-result-group"
      description: Name of the result channel group.  Needed if the application functions as an event processor or sink.
      required: true    
      dependsOn: 
        name: eventSinkRole    
    - label: Message Broker Name       
      name: msgBrokerName
      inputType: text
      defaultValue: "stream-sample-message-broker"
      description: The name of the message broker to connect to for sending and receiving messages.
      required: true                              
  imports:  
  - name: live-update
    expose:
      - name: liveUpdateIDESupport
      - name: sourceRepositoryPrefix
  - name: tap-workload
  - name: build-wrapper-maven

engine:
  let:
    - name: packageDirectory
      expression: '#packageName.replace(".", "/")'
    - name: workloadResourceName
      expression: '#artifactId.toLowerCase()'
    - name: lambaObjectPlural
      expression: "#objectModelClassName.toLowerCase() + 's'"      
    - name: lambaObjectSingleton
      expression: "#objectModelClassName.toLowerCase()"   
    - name: bindingName
      expression: "#objectModelClassName.toLowerCase()"                
  chain:
 
    # Maven group updated
    - merge:
        - include: [ "**" ]
          exclude: [ "pom.xml", "**/templates/application.yaml", "**/catalog/catalog-info.yaml"]
        - include: [ "pom.xml", "**/catalog/catalog-info.yaml"]       
          chain:
            - type: ReplaceText
              substitutions:
                - text: "<groupId>com.example</groupId>"
                  with: "'<groupId>' + #groupId + '</groupId>'"
                - text: "<groupId>streaming-app-template</groupId>"
                  with: "'<groupId>' + #projectName + '</groupId>'"     
                - text: "streaming-app-template"
                  with: "#projectName"                                                     
        - include: [ "**/templates/application.yaml" ]          
          chain:
            - type: ReplaceText
              substitutions:        
                - text: "Foo"
                  with: "#objectModelClassName"                   
            - type: YTT
            - type: RewritePath
              regex: 'templates/application.yaml'
              rewriteTo: "'src/main/resources/application.yaml'"                                                      
    - merge:
      - exclude: [ "**/*.java"]
      - include: [ "**/StreamingAppTemplateApplicationTests.java", "**/StreamingAppTemplateApplication.java", "**/Foo.java"]                      
        chain:
          - type: ReplaceText
            substitutions:
              - text: "com.example.tanzu.streamtemplate"
                with: "#packageName"
          - type: ReplaceText
            substitutions:
              - text: "StreamingAppTemplateApplication"
                with: "#mainClassName"                
          - type: ReplaceText
            substitutions:
              - text: "Foo"
                with: "#objectModelClassName"     
          - type: RewritePath
            regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)streamtemplate/StreamingAppTemplateApplicationTests.java"
            rewriteTo: "'src/' + #sourceset + '/java/' + #packageDirectory + '/' + #mainClassName + 'Tests.java'"    
          - type: RewritePath
            regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)streamtemplate/StreamingAppTemplateApplication.java"
            rewriteTo: "'src/' + #sourceset + '/java/' + #packageDirectory + '/' + #mainClassName + '.java'"                                                 
          - type: RewritePath
            regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)streamtemplate/model/Foo.java"
            rewriteTo: "'src/' + #sourceset + '/java/' + #packageDirectory + '/model/' + #objectModelClassName + '.java'"                                                           
          - type: RewritePath
            regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)streamtemplate(?<untouchedpath>.*)"
            rewriteTo: "'src/' + #sourceset + '/java/' + #packageDirectory + '/' + #untouchedpath"            
      - condition: '#eventSourceRole'
        include: [ "**/FooSource.java"]                      
        chain:
          - type: ReplaceText
            substitutions:
              - text: "com.example.tanzu.streamtemplate"
                with: "#packageName"             
          - type: ReplaceText
            substitutions:
              - text: "Foo"
                with: "#objectModelClassName"   
          - type: RewritePath
            regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)streamtemplate/functions/FooSource.java"
            rewriteTo: "'src/' + #sourceset + '/java/' + #packageDirectory + '/functions/' + #objectModelClassName + 'Source.java'"  
      - condition: '#eventProcessRole'
        include: [ "**/FooProcessor.java"]                      
        chain:
          - type: ReplaceText
            substitutions:
              - text: "com.example.tanzu.streamtemplate"
                with: "#packageName"             
          - type: ReplaceText
            substitutions:
              - text: "Foo"
                with: "#objectModelClassName"   
          - type: ReplaceText
            substitutions:
              - text: "foos"
                with: "#lambaObjectPlural"  
          - type: ReplaceText
            substitutions:
              - text: "foo"
                with: "#lambaObjectSingleton"  
          - type: RewritePath
            regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)streamtemplate/functions/FooProcessor.java"
            rewriteTo: "'src/' + #sourceset + '/java/' + #packageDirectory + '/functions/' + #objectModelClassName + 'Processor.java'"  
      - condition: '#eventSinkRole'
        include: [ "**/FooSink.java"]                      
        chain:
          - type: ReplaceText
            substitutions:
              - text: "com.example.tanzu.streamtemplate"
                with: "#packageName"             
          - type: ReplaceText
            substitutions:
              - text: "Foo"
                with: "#objectModelClassName"   
          - type: ReplaceText
            substitutions:
              - text: "foos"
                with: "#lambaObjectPlural"  
          - type: ReplaceText
            substitutions:
              - text: "foo"
                with: "#lambaObjectSingleton"  
          - type: RewritePath
            regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)streamtemplate/functions/FooSink.java"
            rewriteTo: "'src/' + #sourceset + '/java/' + #packageDirectory + '/functions/' + #objectModelClassName + 'Sink.java'"    
    - merge:
      - exclude: [ "config/workload.yaml"]
      - include: [ "config/workload.yaml"]
        chain:
          - type: YTT
    - merge:
        - type: InvokeFragment
          reference: live-update
        - include: [ "**" ]
      onConflict: UseFirst          
    - merge:
        - type: InvokeFragment
          reference: tap-workload
        - include: [ "**" ]
        - type: InvokeFragment
          reference: build-wrapper-maven 
        - type: Provenance       
      onConflict: UseFirst                                  
   
  

      